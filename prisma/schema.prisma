generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  ok                Boolean @default(false)
  state             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  leftmatches   Match[]       @relation("left")
  rightmatches  Match[]       @relation("right")
  scores        PlayerScore[]
  feedback      Feedback[]
  roleId        Int
  role          Role          @relation(fields: [roleId], references: [id])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Match {
  id              String   @id @default(cuid())
  createdAt       DateTime
  left            User[]   @relation("left", references: [id])
  right           User[]   @relation("right", references: [id])
  leftscore       Int
  rightscore      Int
  gameid          String
  game            Game     @relation(fields: [gameid], references: [id])
  seasonid        String
  season          Season   @relation(fields: [seasonid], references: [id])
  points          Int      @default(0)
  notification_id String?
}

model Game {
  id                String        @id @default(cuid())
  slug              String
  name              String
  icon              String?
  officeid          String
  office            Office        @relation(fields: [officeid], references: [id])
  matches           Match[]
  scores            PlayerScore[]
  maxPlayersPerTeam Int?          @default(1)
  flags             Int?
  seasons           Season[]

  @@unique([slug, officeid])
}

model Office {
  id    String  @id @default(cuid())
  name  String
  icon  String?
  games Game[]
  slug  String  @unique @default(uuid())
}

model PlayerScore {
  id       String @id @default(cuid())
  playerid String
  player   User   @relation(fields: [playerid], references: [id])
  points   Int
  gameid   String
  game     Game   @relation(fields: [gameid], references: [id])
  seasonid String
  season   Season @relation(fields: [seasonid], references: [id])

  @@unique([gameid, playerid, seasonid])
}

model Season {
  id      String        @id @default(uuid())
  name    String
  slug    String
  gameid  String
  game    Game          @relation(fields: [gameid], references: [id])
  scores  PlayerScore[]
  matches Match[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Feedback {
  id        String   @id @default(cuid())
  playerid  String?
  player    User?    @relation(fields: [playerid], references: [id])
  text      String?
  rating    Int
  createdAt DateTime
}
